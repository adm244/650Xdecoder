#ifndef _OPCODES_H_
#define _OPCODES_H_

#define OPCODE(opname, addrmode) opname##_##addrmode
#define DEFINE_OPCODE(opname, addrmode, opcode) OPCODE(opname, addrmode) = opcode

#define BEGIN_DEFINE_OPERATION(opname) {opname, {
#define DEFINE_OPERATION(opname, addrmode, length, cycles) OPCODE(opname, addrmode), addrmode, length, cycles
#define DEFINE_OPERATION_EMPTY 0, 0, 0, 0
#define END_DEFINE_OPERATION }}

#define MAX_ADDR_MODES 16

typedef struct {
//NOTE(adm244): if you change this, don't forget to also change DEFINE_OPERATION !!!
  byte opcode;
  byte addrmode;
  byte length;
  byte cycles;
} instruction_t;

typedef struct {
  byte name;
  instruction_t instructions[MAX_ADDR_MODES];
} operation_t;

/////////////////////////////////////////////////////////////////////

// ADDRESS MODES
/*
  IMPORTANT(adm244):
    If you change this, you _MUST_ reorder entries in optable !!!
*/
typedef enum {
  ACCUMULATOR, // 1
  RELATIVE,    // 2
  IMMEDIATE,   // 2
  ZEROPAGE,    // 2
  ZEROPAGE_X,  // 2
  ZEROPAGE_Y,  // 2
  ABSOLUTE,    // 3
  ABSOLUTE_X,  // 3
  ABSOLUTE_Y,  // 3
  INDIRECT_X,  // 2
  INDIRECT_Y,  // 2
  IMPLIED,     // 1
  INDIRECT     // 3
} opaddrmode;
// #ADDRESS MODES

/////////////////////////////////////////////////////////////////////

// OPERATIONS
/*
  IMPORTANT(adm244):
    If you change this, you _MUST_ reorder entries in optable !!!
*/
typedef enum {
  ADC, // Add memory to accumulator with carry
  AND, // "AND" memory with accumulator
  ASL, // Shift left one bit (memory or accumulator)
  BCC, // Branch on carry clear
  BCS, // Branch on carry set
  BEQ, // Branch on result zero
  BIT, // Test bits in memory with accumulator
  BMI, // Branch on result minus
  BNE, // Branch on result not zero
  BPL, // Branch on result plus
  BRK, // Force break
  BVC, // Branch on overflow clear
  BVS, // Branch on overflow set
  CLC, // Clear carry flag
  CLD, // Clear decimal mode
  CLI, // Clear interrupt disable bit
  CLV, // Clear overflow flag
  CMP, // Compare memory and accumulator
  CPX, // Compare memory and index X
  CPY, // Compare memory and index Y
  DEC, // Decrement memory by one
  DEX, // Decrement index X by one
  DEY, // Decrement index Y by one
  EOR, // "Exclusive-Or" memory with accumulator
  INC, // Increment memory by one
  INX, // Increment index X by one
  INY, // Increment index Y by one
  JMP, // Jump to new location
  JSR, // Jump to new location saving return address
  LDA, // Load accumulator with memory
  LDX, // Load index X with memory
  LDY, // Load index Y with memory
  LSR, // Shift right one bit (memory or accumulator)
  NOP, // No operation
  ORA, // "OR" memory with accumulator
  PHA, // Push accumulator on stack
  PHP, // Push processor status on stack
  PLA, // Pull accumulator from stack
  PLP, // Pull processor status from stack
  ROL, // Rotate one bit left (memory or accumulator)
  ROR, // Rotate one bit right (memory or accumulator)
  RTI, // Return from interrupt
  RTS, // Return from subroutine
  SBC, // Subtract memory from accumulator with borrow
  SEC, // Set carry flag
  SED, // Set decimal mode
  SEI, // Set interrupt disable status
  STA, // Store accumulator in memory
  STX, // Store index X in memory
  STY, // Store index Y in memory
  TAX, // Transfer accumulator to index X
  TAY, // Transfer accumulator to index Y
  TYA, // Transfer index Y to accumulator
  TSX, // Transfer stack pointer to index X
  TXA, // Transfer index X to accumulator
  TXS, // Transfer index X to stack pointer
} opname;
// #OPERATIONS

/////////////////////////////////////////////////////////////////////

// OPCODES
typedef enum {
  // ADC
  DEFINE_OPCODE(ADC, IMMEDIATE,   0x69),
  DEFINE_OPCODE(ADC, ZEROPAGE,    0x65),
  DEFINE_OPCODE(ADC, ZEROPAGE_X,  0x75),
  DEFINE_OPCODE(ADC, ABSOLUTE,    0x6D),
  DEFINE_OPCODE(ADC, ABSOLUTE_X,  0x7D),
  DEFINE_OPCODE(ADC, ABSOLUTE_Y,  0x79),
  DEFINE_OPCODE(ADC, INDIRECT_X,  0x61),
  DEFINE_OPCODE(ADC, INDIRECT_Y,  0x71),
  
  // AND
  DEFINE_OPCODE(AND, IMMEDIATE,   0x29),
  DEFINE_OPCODE(AND, ZEROPAGE,    0x25),
  DEFINE_OPCODE(AND, ZEROPAGE_X,  0x35),
  DEFINE_OPCODE(AND, ABSOLUTE,    0x2D),
  DEFINE_OPCODE(AND, ABSOLUTE_X,  0x3D),
  DEFINE_OPCODE(AND, ABSOLUTE_Y,  0x39),
  DEFINE_OPCODE(AND, INDIRECT_X,  0x21),
  DEFINE_OPCODE(AND, INDIRECT_Y,  0x31),
  
  // ASL
  DEFINE_OPCODE(ASL, ACCUMULATOR, 0x0A),
  DEFINE_OPCODE(ASL, ZEROPAGE,    0x06),
  DEFINE_OPCODE(ASL, ZEROPAGE_X,  0x16),
  DEFINE_OPCODE(ASL, ABSOLUTE,    0x0E),
  DEFINE_OPCODE(ASL, ABSOLUTE_X,  0x1E),
  
  // BCC
  DEFINE_OPCODE(BCC, RELATIVE,    0x90),
  
  // BCS
  DEFINE_OPCODE(BCS, RELATIVE,    0xB0),
  
  // BEQ
  DEFINE_OPCODE(BEQ, RELATIVE,    0xF0),
  
  // BIT
  DEFINE_OPCODE(BIT, ZEROPAGE,    0x24),
  DEFINE_OPCODE(BIT, ABSOLUTE,    0x2C),
  
  // BMI
  DEFINE_OPCODE(BMI, RELATIVE,    0x30),
  
  // BNE
  DEFINE_OPCODE(BNE, RELATIVE,    0xD0),
  
  // BPL
  DEFINE_OPCODE(BPL, RELATIVE,    0x10),
  
  // BRK
  DEFINE_OPCODE(BRK, IMPLIED,     0x00),
  
  // BVC
  DEFINE_OPCODE(BVC, RELATIVE,    0x50),
  
  // BVS
  DEFINE_OPCODE(BVS, RELATIVE,    0x70),
  
  // CLC
  DEFINE_OPCODE(CLC, IMPLIED,     0x18),
  
  // CLD
  DEFINE_OPCODE(CLD, IMPLIED,     0xD8),
  
  // CLI
  DEFINE_OPCODE(CLI, IMPLIED,     0x58),
  
  // CLV
  DEFINE_OPCODE(CLV, IMPLIED,     0xB8),
  
  // CMP
  DEFINE_OPCODE(CMP, IMMEDIATE,   0xC9),
  DEFINE_OPCODE(CMP, ZEROPAGE,    0xC5),
  DEFINE_OPCODE(CMP, ZEROPAGE_X,  0xD5),
  DEFINE_OPCODE(CMP, ABSOLUTE,    0xCD),
  DEFINE_OPCODE(CMP, ABSOLUTE_X,  0xDD),
  DEFINE_OPCODE(CMP, ABSOLUTE_Y,  0xD9),
  DEFINE_OPCODE(CMP, INDIRECT_X,  0xC1),
  DEFINE_OPCODE(CMP, INDIRECT_Y,  0xD1),
  
  // CPX
  DEFINE_OPCODE(CPX, IMMEDIATE,   0xE0),
  DEFINE_OPCODE(CPX, ZEROPAGE,    0xE4),
  DEFINE_OPCODE(CPX, ABSOLUTE,    0xEC),
  
  // CPY
  DEFINE_OPCODE(CPY, IMMEDIATE,   0xC0),
  DEFINE_OPCODE(CPY, ZEROPAGE,    0xC4),
  DEFINE_OPCODE(CPY, ABSOLUTE,    0xCC),
  
  // DEC
  DEFINE_OPCODE(DEC, ZEROPAGE,    0xC6),
  DEFINE_OPCODE(DEC, ZEROPAGE_X,  0xD6),
  DEFINE_OPCODE(DEC, ABSOLUTE,    0xCE),
  DEFINE_OPCODE(DEC, ABSOLUTE_X,  0xDE),
  
  // DEX
  DEFINE_OPCODE(DEX, IMPLIED,     0xCA),
  
  // DEY
  DEFINE_OPCODE(DEY, IMPLIED,     0x88),
  
  // EOR
  DEFINE_OPCODE(EOR, IMMEDIATE,   0x49),
  DEFINE_OPCODE(EOR, ZEROPAGE,    0x45),
  DEFINE_OPCODE(EOR, ZEROPAGE_X,  0x55),
  DEFINE_OPCODE(EOR, ABSOLUTE,    0x4D),
  DEFINE_OPCODE(EOR, ABSOLUTE_X,  0x5D),
  DEFINE_OPCODE(EOR, ABSOLUTE_Y,  0x59),
  DEFINE_OPCODE(EOR, INDIRECT_X,  0x41),
  DEFINE_OPCODE(EOR, INDIRECT_Y,  0x51),
  
  // INC
  DEFINE_OPCODE(INC, ZEROPAGE,    0xE6),
  DEFINE_OPCODE(INC, ZEROPAGE_X,  0xF6),
  DEFINE_OPCODE(INC, ABSOLUTE,    0xFE),
  DEFINE_OPCODE(INC, ABSOLUTE_X,  0xFE),
  
  // INX
  DEFINE_OPCODE(INX, IMPLIED,     0xE8),
  
  // INY
  DEFINE_OPCODE(INY, IMPLIED,     0xC8),
  
  // JMP
  DEFINE_OPCODE(JMP, ABSOLUTE,    0x4C),
  DEFINE_OPCODE(JMP, INDIRECT,    0x6C),
  
  // JSR
  DEFINE_OPCODE(JSR, ABSOLUTE,    0x20),
  
  // LDA
  DEFINE_OPCODE(LDA, IMMEDIATE,   0xA9),
  DEFINE_OPCODE(LDA, ZEROPAGE,    0xA5),
  DEFINE_OPCODE(LDA, ZEROPAGE_X,  0xB5),
  DEFINE_OPCODE(LDA, ABSOLUTE,    0xAD),
  DEFINE_OPCODE(LDA, ABSOLUTE_X,  0xBD),
  DEFINE_OPCODE(LDA, ABSOLUTE_Y,  0xB9),
  DEFINE_OPCODE(LDA, INDIRECT_X,  0xA1),
  DEFINE_OPCODE(LDA, INDIRECT_Y,  0xB1),
  
  // LDX
  DEFINE_OPCODE(LDX, IMMEDIATE,   0xA2),
  DEFINE_OPCODE(LDX, ZEROPAGE,    0xA6),
  DEFINE_OPCODE(LDX, ZEROPAGE_Y,  0xB6),
  DEFINE_OPCODE(LDX, ABSOLUTE,    0xAE),
  DEFINE_OPCODE(LDX, ABSOLUTE_Y,  0xBE),
  
  // LDY
  DEFINE_OPCODE(LDY, IMMEDIATE,   0xA0),
  DEFINE_OPCODE(LDY, ZEROPAGE,    0xA4),
  DEFINE_OPCODE(LDY, ZEROPAGE_X,  0xB4),
  DEFINE_OPCODE(LDY, ABSOLUTE,    0xAC),
  DEFINE_OPCODE(LDY, ABSOLUTE_X,  0xBC),
  
  // LSR
  DEFINE_OPCODE(LSR, ACCUMULATOR, 0x4A),
  DEFINE_OPCODE(LSR, ZEROPAGE,    0x46),
  DEFINE_OPCODE(LSR, ZEROPAGE_X,  0x56),
  DEFINE_OPCODE(LSR, ABSOLUTE,    0x4E),
  DEFINE_OPCODE(LSR, ABSOLUTE_X,  0x5E),
  
  // NOP
  DEFINE_OPCODE(NOP, IMPLIED,     0xEA),
  
  // ORA
  DEFINE_OPCODE(ORA, IMMEDIATE,   0x09),
  DEFINE_OPCODE(ORA, ZEROPAGE,    0x05),
  DEFINE_OPCODE(ORA, ZEROPAGE_X,  0x05),
  DEFINE_OPCODE(ORA, ABSOLUTE,    0x0D),
  DEFINE_OPCODE(ORA, ABSOLUTE_X,  0x1D),
  DEFINE_OPCODE(ORA, ABSOLUTE_Y,  0x19),
  DEFINE_OPCODE(ORA, INDIRECT_X,  0x01),
  DEFINE_OPCODE(ORA, INDIRECT_Y,  0x11),
  
  // PHA
  DEFINE_OPCODE(PHA, IMPLIED,     0x48),
  
  // PHP
  DEFINE_OPCODE(PHP, IMPLIED,     0x08),
  
  // PLA
  DEFINE_OPCODE(PLA, IMPLIED,     0x68),
  
  // PLP
  DEFINE_OPCODE(PLP, IMPLIED,     0x28),
  
  // ROL
  DEFINE_OPCODE(ROL, ACCUMULATOR, 0x2A),
  DEFINE_OPCODE(ROL, ZEROPAGE,    0x26),
  DEFINE_OPCODE(ROL, ZEROPAGE_X,  0x36),
  DEFINE_OPCODE(ROL, ABSOLUTE,    0x2E),
  DEFINE_OPCODE(ROL, ABSOLUTE_X,  0x3E),
  
  // ROR
  DEFINE_OPCODE(ROR, ACCUMULATOR, 0x6A),
  DEFINE_OPCODE(ROR, ZEROPAGE,    0x66),
  DEFINE_OPCODE(ROR, ZEROPAGE_X,  0x76),
  DEFINE_OPCODE(ROR, ABSOLUTE,    0x6E),
  DEFINE_OPCODE(ROR, ABSOLUTE_X,  0x7E),
  
  // RTI
  DEFINE_OPCODE(RTI, IMPLIED,     0x40),
  
  // RTS
  DEFINE_OPCODE(RTS, IMPLIED,     0x60),
  
  // SBC
  DEFINE_OPCODE(SBC, IMMEDIATE,   0xE9),
  DEFINE_OPCODE(SBC, ZEROPAGE,    0xE5),
  DEFINE_OPCODE(SBC, ZEROPAGE_X,  0xF5),
  DEFINE_OPCODE(SBC, ABSOLUTE,    0xED),
  DEFINE_OPCODE(SBC, ABSOLUTE_X,  0xFD),
  DEFINE_OPCODE(SBC, ABSOLUTE_Y,  0xF9),
  DEFINE_OPCODE(SBC, INDIRECT_X,  0xE1),
  DEFINE_OPCODE(SBC, INDIRECT_Y,  0xF1),
  
  // SEC
  DEFINE_OPCODE(SEC, IMPLIED,     0x38),
  
  // SED
  DEFINE_OPCODE(SED, IMPLIED,     0xF8),
  
  // SEI
  DEFINE_OPCODE(SEI, IMPLIED,     0x78),
  
  // STA
  DEFINE_OPCODE(STA, ZEROPAGE,    0x85),
  DEFINE_OPCODE(STA, ZEROPAGE_X,  0x95),
  DEFINE_OPCODE(STA, ABSOLUTE,    0x8D),
  DEFINE_OPCODE(STA, ABSOLUTE_X,  0x9D),
  DEFINE_OPCODE(STA, ABSOLUTE_Y,  0x99),
  DEFINE_OPCODE(STA, INDIRECT_X,  0x81),
  DEFINE_OPCODE(STA, INDIRECT_Y,  0x91),
  
  // STX
  DEFINE_OPCODE(STX, ZEROPAGE,    0x86),
  DEFINE_OPCODE(STX, ZEROPAGE_Y,  0x96),
  DEFINE_OPCODE(STX, ABSOLUTE,    0x8E),
  
  // STY
  DEFINE_OPCODE(STY, ZEROPAGE,    0x84),
  DEFINE_OPCODE(STY, ZEROPAGE_X,  0x94),
  DEFINE_OPCODE(STY, ABSOLUTE,    0x8C),
  
  // TAX
  DEFINE_OPCODE(TAX, IMPLIED,     0xAA),
  
  // TAY
  DEFINE_OPCODE(TAY, IMPLIED,     0xA8),
  
  // TYA
  DEFINE_OPCODE(TYA, IMPLIED,     0x98),
  
  // TSX
  DEFINE_OPCODE(TSX, IMPLIED,     0xBA),
  
  // TXA
  DEFINE_OPCODE(TXA, IMPLIED,     0x8A),
  
  // TXS
  DEFINE_OPCODE(TXS, IMPLIED,     0x9A),
} opcodes;
// #OPCODES

/////////////////////////////////////////////////////////////////////

// OPERATIONS TABLE
/*
  IMPORTANT(adm244):
    This table _MUST_ obey following constraints:
      1) opname must be an index into optable
      2) opaddrmode must be an index into optable[i].instructions
    If you change either of those enums, entries below _MUST_ be reordered !!!
*/
internal const operation_t optable[] = {
  BEGIN_DEFINE_OPERATION(ADC)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION(ADC, IMMEDIATE,  2, 2),
    DEFINE_OPERATION(ADC, ZEROPAGE,   2, 3),
    DEFINE_OPERATION(ADC, ZEROPAGE_X, 2, 4),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(ADC, ABSOLUTE,   3, 4),
    DEFINE_OPERATION(ADC, ABSOLUTE_X, 3, 4),
    DEFINE_OPERATION(ADC, ABSOLUTE_Y, 3, 4),
    DEFINE_OPERATION(ADC, INDIRECT_X, 2, 6),
    DEFINE_OPERATION(ADC, INDIRECT_Y, 2, 5)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(AND)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION(AND, IMMEDIATE,  2, 2),
    DEFINE_OPERATION(AND, ZEROPAGE,   2, 3),
    DEFINE_OPERATION(AND, ZEROPAGE_X, 2, 4),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(AND, ABSOLUTE,   3, 4),
    DEFINE_OPERATION(AND, ABSOLUTE_X, 3, 4),
    DEFINE_OPERATION(AND, ABSOLUTE_Y, 3, 4),
    DEFINE_OPERATION(AND, INDIRECT_X, 2, 6),
    DEFINE_OPERATION(AND, INDIRECT_Y, 2, 5)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(ASL)
    DEFINE_OPERATION(ASL, ACCUMULATOR, 1, 2),
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION(ASL, ZEROPAGE,    2, 5),
    DEFINE_OPERATION(ASL, ZEROPAGE_X,  2, 6),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(ASL, ABSOLUTE,    3, 6),
    DEFINE_OPERATION(ASL, ABSOLUTE_X,  3, 7),
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(BCC)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION(BCC, RELATIVE, 2, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(BCS)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION(BCS, RELATIVE, 2, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(BEQ)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION(BEQ, RELATIVE, 2, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(BIT)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION(BIT, ZEROPAGE, 2, 3),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(BIT, ABSOLUTE, 3, 4)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(BMI)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION(BMI, RELATIVE, 2, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(BNE)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION(BNE, RELATIVE, 2, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(BPL)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION(BPL, RELATIVE, 2, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(BRK)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(BRK, IMPLIED, 1, 7)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(BVC)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION(BVC, RELATIVE, 2, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(BVS)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION(BVS, RELATIVE, 2, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(CLC)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(CLC, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(CLD)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(CLD, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(CLI)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(CLI, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(CLV)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(CLV, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(CMP)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION(CMP, IMMEDIATE,  2, 2),
    DEFINE_OPERATION(CMP, ZEROPAGE,   2, 3),
    DEFINE_OPERATION(CMP, ZEROPAGE_X, 2, 4),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(CMP, ABSOLUTE,   3, 4),
    DEFINE_OPERATION(CMP, ABSOLUTE_X, 3, 4),
    DEFINE_OPERATION(CMP, ABSOLUTE_Y, 3, 4),
    DEFINE_OPERATION(CMP, INDIRECT_X, 2, 6),
    DEFINE_OPERATION(CMP, INDIRECT_Y, 2, 5)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(CPX)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION(CPX, IMMEDIATE, 2, 2),
    DEFINE_OPERATION(CPX, ZEROPAGE,  2, 3),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(CPX, ABSOLUTE,  3, 4),
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(CPY)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION(CPY, IMMEDIATE, 2, 2),
    DEFINE_OPERATION(CPY, ZEROPAGE,  2, 3),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(CPY, ABSOLUTE,  3, 4),
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(DEC)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION(DEC, ZEROPAGE,   2, 5),
    DEFINE_OPERATION(DEC, ZEROPAGE_X, 2, 6),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(DEC, ABSOLUTE,   3, 6),
    DEFINE_OPERATION(DEC, ABSOLUTE_X, 3, 7),
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(DEX)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(DEX, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(DEY)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(DEY, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(EOR)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION(EOR, IMMEDIATE,  2, 2),
    DEFINE_OPERATION(EOR, ZEROPAGE,   2, 3),
    DEFINE_OPERATION(EOR, ZEROPAGE_X, 2, 4),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(EOR, ABSOLUTE,   3, 4),
    DEFINE_OPERATION(EOR, ABSOLUTE_X, 3, 4),
    DEFINE_OPERATION(EOR, ABSOLUTE_Y, 3, 4),
    DEFINE_OPERATION(EOR, INDIRECT_X, 2, 6),
    DEFINE_OPERATION(EOR, INDIRECT_Y, 2, 5)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(INC)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION(INC, ZEROPAGE,   2, 5),
    DEFINE_OPERATION(INC, ZEROPAGE_X, 2, 6),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(INC, ABSOLUTE,   3, 6),
    DEFINE_OPERATION(INC, ABSOLUTE_X, 3, 7),
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(INX)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(INX, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(INY)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(INY, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(JMP)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(JMP, ABSOLUTE, 3, 3),
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION_EMPTY, // IMPLIED
    DEFINE_OPERATION(JMP, INDIRECT, 3, 5)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(JSR)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(JSR, ABSOLUTE, 3, 6)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(LDA)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION(LDA, IMMEDIATE,  2, 2),
    DEFINE_OPERATION(LDA, ZEROPAGE,   2, 3),
    DEFINE_OPERATION(LDA, ZEROPAGE_X, 2, 4),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(LDA, ABSOLUTE,   3, 4),
    DEFINE_OPERATION(LDA, ABSOLUTE_X, 3, 4),
    DEFINE_OPERATION(LDA, ABSOLUTE_Y, 3, 4),
    DEFINE_OPERATION(LDA, INDIRECT_X, 2, 6),
    DEFINE_OPERATION(LDA, INDIRECT_Y, 2, 5)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(LDX)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION(LDX, IMMEDIATE,  2, 2),
    DEFINE_OPERATION(LDX, ZEROPAGE,   2, 3),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION(LDX, ZEROPAGE_Y, 2, 4),
    DEFINE_OPERATION(LDX, ABSOLUTE,   3, 4),
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION(LDX, ABSOLUTE_Y, 3, 4),
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(LDY)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION(LDY, IMMEDIATE,  2, 2),
    DEFINE_OPERATION(LDY, ZEROPAGE,   2, 3),
    DEFINE_OPERATION(LDY, ZEROPAGE_X, 2, 4),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(LDY, ABSOLUTE,   3, 4),
    DEFINE_OPERATION(LDY, ABSOLUTE_X, 3, 4),
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(LSR)
    DEFINE_OPERATION(LSR, ACCUMULATOR, 1, 2),
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION(LSR, ZEROPAGE,    2, 5),
    DEFINE_OPERATION(LSR, ZEROPAGE_X,  2, 6),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(LSR, ABSOLUTE,    3, 6),
    DEFINE_OPERATION(LSR, ABSOLUTE_X,  3, 7),
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(NOP)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(NOP, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(ORA)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION(ORA, IMMEDIATE,  2, 2),
    DEFINE_OPERATION(ORA, ZEROPAGE,   2, 3),
    DEFINE_OPERATION(ORA, ZEROPAGE_X, 2, 4),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(ORA, ABSOLUTE,   3, 4),
    DEFINE_OPERATION(ORA, ABSOLUTE_X, 3, 4),
    DEFINE_OPERATION(ORA, ABSOLUTE_Y, 3, 4),
    DEFINE_OPERATION(ORA, INDIRECT_X, 2, 6),
    DEFINE_OPERATION(ORA, INDIRECT_Y, 2, 5)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(PHA)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(PHA, IMPLIED, 1, 3)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(PHP)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(PHP, IMPLIED, 1, 3)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(PLA)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(PLA, IMPLIED, 1, 4)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(PLP)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(PLP, IMPLIED, 1, 4)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(ROL)
    DEFINE_OPERATION(ROL, ACCUMULATOR, 1, 2),
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION(ROL, ZEROPAGE,    2, 5),
    DEFINE_OPERATION(ROL, ZEROPAGE_X,  2, 6),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(ROL, ABSOLUTE,    3, 6),
    DEFINE_OPERATION(ROL, ABSOLUTE_X,  3, 7),
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(ROR)
    DEFINE_OPERATION(ROR, ACCUMULATOR, 1, 2),
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION(ROR, ZEROPAGE,    2, 5),
    DEFINE_OPERATION(ROR, ZEROPAGE_X,  2, 6),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(ROR, ABSOLUTE,    3, 6),
    DEFINE_OPERATION(ROR, ABSOLUTE_X,  3, 7),
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(RTI)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(RTI, IMPLIED, 1, 6)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(RTS)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(RTS, IMPLIED, 1, 6)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(SBC)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION(SBC, IMMEDIATE,  2, 2),
    DEFINE_OPERATION(SBC, ZEROPAGE,   2, 3),
    DEFINE_OPERATION(SBC, ZEROPAGE_X, 2, 4),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(SBC, ABSOLUTE,   3, 4),
    DEFINE_OPERATION(SBC, ABSOLUTE_X, 3, 4),
    DEFINE_OPERATION(SBC, ABSOLUTE_Y, 3, 4),
    DEFINE_OPERATION(SBC, INDIRECT_X, 2, 6),
    DEFINE_OPERATION(SBC, INDIRECT_Y, 2, 5)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(SEC)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(SEC, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(SED)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(SED, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(SEI)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(SEI, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(STA)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION(STA, ZEROPAGE,   2, 3),
    DEFINE_OPERATION(STA, ZEROPAGE_X, 2, 4),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(STA, ABSOLUTE,   3, 4),
    DEFINE_OPERATION(STA, ABSOLUTE_X, 3, 5),
    DEFINE_OPERATION(STA, ABSOLUTE_Y, 3, 5),
    DEFINE_OPERATION(STA, INDIRECT_X, 2, 6),
    DEFINE_OPERATION(STA, INDIRECT_Y, 2, 6)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(STX)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION(STX, ZEROPAGE,   2, 3),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION(STX, ZEROPAGE_Y, 2, 4),
    DEFINE_OPERATION(STX, ABSOLUTE,   3, 4),
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(STY)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION(STY, ZEROPAGE,   2, 3),
    DEFINE_OPERATION(STY, ZEROPAGE_X, 2, 4),
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION(STY, ABSOLUTE,   3, 4),
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(TAX)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(TAX, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(TAY)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(TAY, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(TYA)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(TYA, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(TSX)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(TSX, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(TXA)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(TXA, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
  
  BEGIN_DEFINE_OPERATION(TXS)
    DEFINE_OPERATION_EMPTY, // ACCUMULATOR
    DEFINE_OPERATION_EMPTY, // RELATIVE
    DEFINE_OPERATION_EMPTY, // IMMEDIATE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_X
    DEFINE_OPERATION_EMPTY, // ZEROPAGE_Y
    DEFINE_OPERATION_EMPTY, // ABSOLUTE
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_X
    DEFINE_OPERATION_EMPTY, // ABSOLUTE_Y
    DEFINE_OPERATION_EMPTY, // INDIRECT_X
    DEFINE_OPERATION_EMPTY, // INDIRECT_Y
    DEFINE_OPERATION(TXS, IMPLIED, 1, 2)
  END_DEFINE_OPERATION,
};
// #OPERATIONS TABLE

/////////////////////////////////////////////////////////////////////

#endif
